b'/*******************************************************************************\r\n *\r\n *  Copyright \xc2\xa9 2011-2014 Hewlett-Packard Development Company, L.P.\r\n *\r\n *  This work is distributed under the W3C\xc2\xae Software License [1]\r\n *  in the hope that it will be useful, but WITHOUT ANY\r\n *  WARRANTY; without even the implied warranty of\r\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n *\r\n *  [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231\r\n *\r\n *  Adapted from the Mobile Test Harness\r\n *  Copyright \xc2\xa9 2007 World Wide Web Consortium\r\n *  http://dev.w3.org/cvsweb/2007/mobile-test-harness/\r\n *\r\n ******************************************************************************/\r\n\r\n/**\r\n  Data returned from server:\r\n\r\n  response.title;\r\n  response.description;\r\n  response.heading; *\r\n  response.build_date;\r\n  response.lock_date; *\r\n  response.test_uri;\r\n  response.results_uri;\r\n  response.details_uri;\r\n  response.client_engine;\r\n  response.is_index; *\r\n  response.engine_titles = { _engineName: title, ... };\r\n  response.sections = { _anchor: section_data, ... };\r\n\r\n  section_data.anchor_name; *\r\n  section_data.section_name; *\r\n  section_data.test_count;\r\n  section_data.results = { _engineName: result_data, ... }\r\n\r\n  result_data.pass_count;\r\n  result_data.fail_count;\r\n\r\n**/\r\n\r\nvar annotator = {\r\n  QUERY_URI:          "https://test.csswg.org/harness/api/status/",\r\n  STYLESHEET_URI:     "https://test.csswg.org/harness/stylesheets/annotate.css",\r\n  NEED_TEST_ICON_URI: "https://test.csswg.org/harness/img/please_help_12.png",\r\n  ENGINE_LOGOS: { \'_gecko\': "https://test.csswg.org/harness/img/gecko.svg",\r\n                  \'_presto\': "https://test.csswg.org/harness/img/presto.svg",\r\n                  \'_trident\': "https://test.csswg.org/harness/img/trident.svg",\r\n                  \'_webkit\': "https://test.csswg.org/harness/img/webkit.svg",\r\n                  \'_blink\': "https://test.csswg.org/harness/img/blink.svg",\r\n                  \'_edge\': "https://test.csswg.org/harness/img/edge.svg"},\r\n\r\n  mResponse: null,\r\n  mClosed: false,\r\n\r\n  buildURI: function(base, sectionName) {\r\n    if (sectionName) {\r\n      return base + \'section/\' + sectionName + \'/\';\r\n    }\r\n    return base;\r\n  },\r\n\r\n  removeAnnotation: function(anchorName) {\r\n    try {\r\n      var annotation = document.getElementById(\'annotation_\' + (anchorName ? anchorName : \'root_\'));\r\n\r\n      if (annotation) {\r\n        annotation.parentNode.removeChild(annotation);\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  },\r\n\r\n  removeAllAnnotations: function () {\r\n    try {\r\n      if (this.mResponse && this.mResponse.sections) {\r\n        for (index in this.mResponse.sections) {\r\n          if (this.mResponse.sections.hasOwnProperty(index)) {\r\n            this.removeAnnotation(this.mResponse.sections[index].anchor_name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  },\r\n\r\n  toggleAnnotations: function() {\r\n    this.mClosed = (! this.mClosed);\r\n    this.removeAllAnnotations();\r\n    this.addAnnotations();\r\n  },\r\n\r\n  toggleDetails: function(domEvent) {\r\n    var engineNode = domEvent.target;\r\n    while (engineNode && (\'SPAN\' != engineNode.tagName.toUpperCase())) {\r\n      engineNode = engineNode.parentNode;\r\n    }\r\n    var engineName = engineNode.getAttribute(\'data-engineName\');\r\n    var annotation = engineNode.parentNode.parentNode;\r\n    var details = annotation.lastChild;\r\n\r\n    if (engineName == details.getAttribute(\'data-engineName\')) {\r\n      details.setAttribute(\'class\', \'details\');\r\n      details.removeAttribute(\'data-engineName\');\r\n    }\r\n    else {\r\n      details.setAttribute(\'data-engineName\', engineName);\r\n\r\n      var engineTitle = this.mResponse.engine_titles[engineName];\r\n      var section = annotation.getAttribute(\'data-section\');\r\n\r\n      var detailsEngine = details.firstChild;\r\n      var detailsLink = detailsEngine.lastChild;\r\n\r\n      detailsEngine.firstChild.textContent = engineTitle + \' \';\r\n      detailsLink.setAttribute(\'href\', this.buildURI(this.mResponse.results_uri, section));\r\n\r\n      var meter = details.lastChild;\r\n      var numbers = meter.firstChild;\r\n      var passBar = numbers.nextSibling;\r\n      var failBar = passBar.nextSibling;\r\n      var needBar = failBar.nextSibling;\r\n      numbers.textContent = engineNode.getAttribute(\'title\');\r\n\r\n      var passCount = parseInt(engineNode.getAttribute(\'data-passCount\'), 10);\r\n      var failCount = parseInt(engineNode.getAttribute(\'data-failCount\'), 10);\r\n      var needCount = parseInt(engineNode.getAttribute(\'data-needCount\'), 10);\r\n      var total = passCount + failCount + needCount;\r\n\r\n      passBar.setAttribute(\'style\', \'width: \' + ((passCount / total) * 100.0) + \'%\');\r\n      failBar.setAttribute(\'style\', \'width: \' + ((failCount / total) * 100.0) + \'%\');\r\n      needBar.setAttribute(\'style\', \'width: \' + ((needCount / total) * 100.0) + \'%\');\r\n\r\n      details.setAttribute(\'class\', \'details open\');\r\n    }\r\n\r\n  },\r\n\r\n  capitalize(str) {\r\n    return (str[0].toUpperCase() + str.substr(1));\r\n  },\r\n\r\n  addAnnotationTo: function(anchorElement, section, first) {\r\n    try {\r\n      var headings = {\'h1\':\'\', \'h2\':\'\', \'h3\':\'\', \'h4\':\'\', \'h5\':\'\', \'h6\':\'\',\r\n                      \'H1\':\'\', \'H2\':\'\', \'H3\':\'\', \'H4\':\'\', \'H5\':\'\', \'H6\':\'\'};\r\n      var targetElement = anchorElement;\r\n\r\n      while (targetElement && (Node.ELEMENT_NODE == targetElement.nodeType) && (! (targetElement.tagName in headings))) {\r\n        targetElement = targetElement.parentNode;\r\n      }\r\n      if (targetElement && (Node.ELEMENT_NODE == targetElement.nodeType)) {\r\n        var needCount = section.test_count;\r\n        for (engineName in section.results) {\r\n          if (section.results.hasOwnProperty(engineName)) {\r\n            var engineResults = section.results[engineName];\r\n            if (this.mResponse.engine_titles[engineName] == this.mResponse.client_engine) {\r\n              needCount = section.test_count - (engineResults.pass_count + engineResults.fail_count);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        var annotation = document.createElement(\'div\');\r\n\r\n        annotation.setAttribute(\'id\', \'annotation_\' + ((! section.anchor_name) ? \'root_\' : section.anchor_name));\r\n        var annotationClass = \'annotation\';\r\n        if (first) {\r\n          annotationClass += \' first\';\r\n        }\r\n        if (0 < needCount) {\r\n          annotationClass += \' need\';\r\n        }\r\n        if (this.mClosed) {\r\n          annotationClass += \' closed\';\r\n        }\r\n        annotation.setAttribute(\'class\', annotationClass);\r\n        if (section.section_name) {\r\n          annotation.setAttribute(\'data-section\', section.section_name);\r\n        }\r\n        annotation.setAttribute(\'data-testCount\', section.test_count);\r\n        annotation.setAttribute(\'data-needCount\', needCount);\r\n\r\n        // disclosure control\r\n        if (first) {\r\n          var disclosure = document.createElement(\'div\');\r\n          disclosure.setAttribute(\'class\', \'disclosure button\');\r\n          disclosure.setAttribute(\'onclick\', \'annotator.toggleAnnotations()\');\r\n          annotation.appendChild(disclosure);\r\n        }\r\n\r\n        // close box\r\n        var closeBox = document.createElement(\'div\');\r\n        closeBox.setAttribute(\'class\', \'close button\');\r\n        if (first) {\r\n          closeBox.setAttribute(\'onclick\', \'annotator.removeAllAnnotations()\');\r\n        }\r\n        else {\r\n          closeBox.setAttribute(\'onclick\', \'annotator.removeAnnotation("\' + section.anchor_name + \'")\');\r\n        }\r\n        annotation.appendChild(closeBox);\r\n\r\n        // Test suite info\r\n        if ((! this.mClosed) && first && this.mResponse.is_index && this.mResponse.heading) {\r\n          var title = document.createElement(\'div\');\r\n          title.setAttribute(\'class\', \'title\');\r\n\r\n          title.innerHTML = this.mResponse.heading;\r\n\r\n          annotation.appendChild(title);\r\n        }\r\n\r\n        // Test count heading\r\n        var heading = document.createElement(\'div\');\r\n        heading.setAttribute(\'class\', \'heading\');\r\n\r\n        var testLink = document.createElement(\'a\');\r\n        testLink.setAttribute(\'href\', this.buildURI(this.mResponse.test_uri, section.section_name));\r\n\r\n        if (0 == section.test_count) {\r\n          testLink.appendChild(document.createTextNode(\'No Tests\'));\r\n        }\r\n        else if (1 == section.test_count) {\r\n          testLink.appendChild(document.createTextNode(\'1 Test\'));\r\n        }\r\n        else {\r\n          testLink.appendChild(document.createTextNode(section.test_count + \' Tests\'));\r\n        }\r\n\r\n        // Testing needed text\r\n        if ((! this.mClosed) && (! this.mResponse.lock_date) && (0 < needCount)) {\r\n          var untested = document.createElement(\'span\');\r\n          var image = document.createElement(\'img\');\r\n          image.setAttribute(\'src\', this.NEED_TEST_ICON_URI);\r\n          image.setAttribute(\'class\', \'need\');\r\n          untested.appendChild(image);\r\n\r\n          if (1 == needCount) {\r\n            testLink.setAttribute(\'title\', \'1 test needs results from your client, please click here to run test\');\r\n          }\r\n          else {\r\n            testLink.setAttribute(\'title\', needCount + \' tests need results from your client, please click here to run tests\');\r\n          }\r\n          untested.appendChild(document.createTextNode(\' \' + needCount + \'\\u00A0untested, please\\u00A0test\'));\r\n          testLink.appendChild(untested);\r\n        }\r\n        heading.appendChild(testLink);\r\n        annotation.appendChild(heading);\r\n\r\n        // Engine result data\r\n        if (! this.mClosed) {\r\n          var majorEngines = document.createElement(\'div\');\r\n          var minorEngines = document.createElement(\'div\');\r\n          majorEngines.setAttribute(\'class\', \'engines\');\r\n          minorEngines.setAttribute(\'class\', \'engines\');\r\n\r\n          for (engineName in section.results) {\r\n            if (section.results.hasOwnProperty(engineName)) {\r\n              var engineResults = section.results[engineName];\r\n              var resultCount = (engineResults.pass_count + engineResults.fail_count);\r\n\r\n              var toolTip = \'\';\r\n              var engineClass = \'\';\r\n              if (0 < resultCount) {\r\n                if (engineResults.pass_count == section.test_count) {\r\n                  toolTip = ((1 < section.test_count)  ? \'All tests pass\' : \'Test passed\');\r\n                  engineClass = \'pass\';\r\n                }\r\n                else {\r\n                  if (engineResults.fail_count == section.test_count) {\r\n                    toolTip = ((1 < section.test_count)  ? \'All tests fail\' : \'Test failed\');\r\n                    engineClass = \'epic-fail\';\r\n                  }\r\n                  else {\r\n                    if (0 < engineResults.pass_count) {\r\n                      toolTip = engineResults.pass_count + \' pass\';\r\n                    }\r\n                    if (0 < engineResults.fail_count) {\r\n                      if (toolTip.length) {\r\n                        toolTip += \', \'\r\n                      }\r\n                      toolTip += engineResults.fail_count + \' fail\';\r\n                    }\r\n                    if (resultCount < section.test_count) {\r\n                      if (toolTip.length) {\r\n                        toolTip += \', \'\r\n                      }\r\n                      toolTip += (section.test_count - resultCount) + \' untested\';\r\n                    }\r\n                    if ((resultCount / section.test_count) < 0.90) {\r\n                      engineClass = \'untested\';\r\n                    }\r\n                    else {\r\n                      switch (Math.round((engineResults.pass_count / section.test_count) * 10.0)) {\r\n                        case 10:\r\n                        case 9: engineClass = \'almost-pass\';  break;\r\n                        case 8: engineClass = \'slightly-buggy\'; break;\r\n                        case 7: engineClass = \'buggy\'; break;\r\n                        case 6: engineClass = \'very-buggy\'; break;\r\n                        case 5: engineClass = \'fail\'; break;\r\n                        default: engineClass = \'epic-fail\'; break;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              else {\r\n                toolTip = \'No data\';\r\n              }\r\n\r\n              if (0 < resultCount) {\r\n                var engineNode = document.createElement(\'span\');\r\n                engineNode.setAttribute(\'title\', toolTip);\r\n                if (this.mResponse.engine_titles[engineName] == this.mResponse.client_engine) {\r\n                  engineClass += \' active\';\r\n                }\r\n                engineNode.setAttribute(\'tabindex\', \'0\');\r\n                engineNode.setAttribute(\'data-engineName\', engineName);\r\n                engineNode.setAttribute(\'data-passCount\', engineResults.pass_count);\r\n                engineNode.setAttribute(\'data-failCount\', engineResults.fail_count);\r\n                engineNode.setAttribute(\'data-needCount\', section.test_count - resultCount);\r\n                engineNode.onclick = function(domEvent) { annotator.toggleDetails(domEvent); };\r\n\r\n                if (engineName in this.ENGINE_LOGOS) {\r\n                  engineClass += \' major\';\r\n                  var logo = document.createElement(\'img\');\r\n                  logo.setAttribute(\'src\', this.ENGINE_LOGOS[engineName]);\r\n                  logo.setAttribute(\'alt\', this.capitalize(engineName.substr(1)));\r\n                  engineNode.appendChild(logo);\r\n                  majorEngines.appendChild(engineNode);\r\n                  majorEngines.appendChild(document.createTextNode(\' \'));\r\n                }\r\n                else {\r\n                  engineNode.appendChild(document.createTextNode(this.mResponse.engine_titles[engineName]));\r\n                  minorEngines.appendChild(engineNode);\r\n                  minorEngines.appendChild(document.createTextNode(\' \'));\r\n                }\r\n\r\n                engineNode.setAttribute(\'class\', engineName.substr(1) + \' \' + engineClass);\r\n              }\r\n            }\r\n          }\r\n          annotation.appendChild(majorEngines);\r\n          annotation.appendChild(minorEngines);\r\n\r\n          var details = document.createElement(\'div\');\r\n          details.setAttribute(\'class\', \'details\');\r\n\r\n          var engineName = document.createElement(\'div\');\r\n          engineName.setAttribute(\'class\', \'engine\');\r\n          engineName.appendChild(document.createTextNode(\'engine \'));\r\n\r\n          var detailsLink = document.createElement(\'a\');\r\n          detailsLink.appendChild(document.createTextNode(\'test details\'));\r\n          engineName.appendChild(detailsLink);\r\n          details.appendChild(engineName);\r\n\r\n          var meter = document.createElement(\'div\');\r\n          meter.setAttribute(\'class\', \'meter\');\r\n          for (barClass in { \'numbers\': \'\', \'pass\': \'\', \'epic-fail\': \'\', \'untested\': \'\' }) {\r\n            var bar = document.createElement(\'span\');\r\n            bar.setAttribute(\'class\', barClass);\r\n            meter.appendChild(bar);\r\n          }\r\n          details.appendChild(meter);\r\n\r\n          annotation.appendChild(details);\r\n        }\r\n\r\n        targetElement.insertBefore(annotation, targetElement.firstChild);\r\n        return true;\r\n      }\r\n    }\r\n    catch (err) {\r\n//      document.body.innerHTML = \'EXCEPTION: \' + err.toString() + err.lineNumber; // DEBUG\r\n    }\r\n    return false;\r\n  },\r\n\r\n  addAnnotation: function(section, first) {\r\n    try {\r\n      var anchorName = section.anchor_name;\r\n\r\n      if (anchorName) { // find element that has anchor name or id\r\n        var found = false;\r\n\r\n        anchor = document.getElementById(anchorName);\r\n        if (! (anchor && this.addAnnotationTo(anchor, section, first))) {\r\n          var anchors = document.getElementsByName(anchorName);\r\n\r\n          for (index in anchors) {\r\n            var anchor = anchors[index];\r\n            if (this.addAnnotationTo(anchor, section, first)) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else if (first) {  // find first h1\r\n        var headings = document.getElementsByTagName(\'h1\');\r\n\r\n        if (headings && (0 < headings.length)) {\r\n          this.addAnnotationTo(headings[0], section, first);\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  },\r\n\r\n  addAnnotations: function () {\r\n    try {\r\n      if (this.mResponse && this.mResponse.sections) {\r\n        if (this.mClosed) {\r\n          this.addAnnotation(this.mResponse.sections[\'_\'], true);\r\n        }\r\n        else {\r\n          var first = true;\r\n          for (anchorName in this.mResponse.sections) {\r\n            if (this.mResponse.sections.hasOwnProperty(anchorName)) {\r\n              this.addAnnotation(this.mResponse.sections[anchorName], first);\r\n              first = false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  },\r\n\r\n  processResponse: function(contentType, responseText) {\r\n    try {\r\n      if (-1 < contentType.indexOf(\'application/vnd.csswg.harness.v1+json\')) {\r\n        var response = JSON.parse(responseText);\r\n\r\n        if (response) {\r\n          this.mResponse = response;\r\n          this.addAnnotations();\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  },\r\n\r\n  annotate: function() {\r\n    try {\r\n      var testSuiteName = \'\';\r\n\r\n      var scripts = document.getElementsByTagName(\'script\');\r\n      for (index in scripts) {\r\n        if (scripts[index].hasAttribute(\'src\')) {\r\n          var scriptSource = scripts[index].getAttribute(\'src\');\r\n          if (-1 < scriptSource.indexOf(\'/annotate.js#\')) {\r\n            testSuiteName = scriptSource.substr(scriptSource.indexOf(\'#\') + 1);\r\n            if (\'!\' == testSuiteName[0]) {\r\n              testSuiteName = testSuiteName.substr(1);\r\n              this.mClosed = true;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (0 < testSuiteName.length) {\r\n        var styleSheet = document.createElement(\'link\');\r\n        styleSheet.setAttribute(\'rel\', \'stylesheet\');\r\n        styleSheet.setAttribute(\'type\', \'text/css\');\r\n        styleSheet.setAttribute(\'href\', this.STYLESHEET_URI);\r\n        document.getElementsByTagName(\'head\')[0].appendChild(styleSheet)\r\n\r\n        var specName = \'\';\r\n        var slashIndex = testSuiteName.indexOf(\'/\');\r\n        if (-1 < slashIndex) {\r\n          specName = testSuiteName.substr(slashIndex + 1);\r\n          testSuiteName = testSuiteName.substr(0, slashIndex);\r\n        }\r\n\r\n        var statusURI = this.QUERY_URI +\r\n                            \'?suite=\' + encodeURIComponent(testSuiteName) +\r\n                            \'&spec=\' + encodeURIComponent(specName) +\r\n                            \'&uri=\' + encodeURIComponent(document.URL);\r\n        if (window.XDomainRequest) {  // The IE way...\r\n          var xdr = new XDomainRequest();\r\n          if (xdr) {\r\n            xdr.onload = function () {\r\n              annotator.processResponse(xdr.contentType, xdr.responseText);\r\n            }\r\n            xdr.open(\'GET\', statusURI);\r\n            xdr.send();\r\n          }\r\n        }\r\n        else {  // The standard way\r\n          var xhr = new XMLHttpRequest();\r\n\r\n          xhr.onreadystatechange = function() {\r\n            if (4 == xhr.readyState) {\r\n              if (200 == xhr.status) {\r\n                annotator.processResponse(xhr.getResponseHeader(\'Content-Type\'), xhr.responseText);\r\n              }\r\n              else if (500 == xhr.status) {\r\n//                document.documentElement.innerHTML = xhr.responseText;  // DEBUG\r\n              }\r\n              else {\r\n//                document.body.innerHTML = \'error: \' + xhr.status + xhr.responseText; // DEBUG\r\n              }\r\n            }\r\n          };\r\n\r\n          xhr.open(\'GET\', statusURI, true);\r\n          xhr.setRequestHeader(\'Accept\', \'application/vnd.csswg.harness.v1+json\');\r\n          xhr.send();\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n//      document.body.innerHTML = \'EXCEPTION: \' + err.toString(); // DEBUG\r\n    }\r\n  },\r\n\r\n  addLoadEvent: function() {\r\n    try {\r\n      var oldOnLoad = window.onload;\r\n      if (typeof window.onload != \'function\') {\r\n        window.onload = this.annotate();\r\n      }\r\n      else {\r\n        window.onload = function () {\r\n          if (oldOnLoad) {\r\n            oldOnLoad();\r\n          }\r\n          annotator.annotate();\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n    }\r\n  }\r\n}\r\n\r\n\r\nannotator.addLoadEvent();\r\n\r\n'